name: versionup

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1

    - name: Install Gcloud
      run: |
        export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
        echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        sudo apt-get update && sudo apt-get install google-cloud-sdk

    - name: Get latest GKE version string
      env:
        GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
        GOOGLE_APPLICATION_CREDENTIALS: ./google_application_credentials.json
        GOOGLE_PROJECT_ID: junpayment
      run: |
        echo ${GOOGLE_APPLICATION_CREDENTIALS_JSON} > ${GOOGLE_APPLICATION_CREDENTIALS}
        gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
        gcloud config set project ${GOOGLE_PROJECT_ID}
        export NEW_MASTER_VERSION=`gcloud container get-server-config --region asia-northeast1 --format json | jq -r '.validMasterVersions | sort | reverse | .[0]'`
        echo ${NEW_MASTER_VERSION}
        export NEW_NODE_VERSION=`gcloud container get-server-config --region asia-northeast1 --format json | jq -r '.validMasterVersions | sort | reverse | .[0]'`
        echo ${NEW_NODE_VERSION}

    - name: Install hub
      run: |
        wget https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz
        sudo tar -xvf go1.12.7.linux-amd64.tar.gz
        sudo mv go /usr/local
        export GOROOT=/usr/local/go
        export GOPATH=$HOME/go
        export PATH=$GOPATH/bin:$GOROOT/bin:$PATH

        git clone https://github.com/github/hub.git
        cd hub
        ./script/build
        ls -alt
        sudo cp hub /usr/local/bin/
        cd

    - name: Make a PR
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_USERNAME: ${{ secrets.GITHUB_ACTOR }}
      run: |
        git checkout feature/update_${NEW_MASTER_VERSION}_${NEW_NODE_VERSION}
        sed -i -r "s/^master_version = \"(.*)\"/master_version = \"${NEW_MASTER_VERSION}\"/" terraform.tfvars.production
        sed -i -r "s/^node_version = \"(.*)\"/node_version = \"${NEW_NODE_VERSION}\"/" terraform.tfvars.production
        cat terraform.tfvars.production

        sed -i -r "s/^master_version = \"(.*)\"/master_version = \"${NEW_MASTER_VERSION}\"/" terraform.tfvars.staging
        sed -i -r "s/^node_version = \"(.*)\"/node_version = \"${NEW_NODE_VERSION}\"/" terraform.tfvars.staging
        cat terraform.tfvars.staging
        cat terraform.tfvars.production

        git commit -m "update_${NEW_MASTER_VERSION}_${NEW_NODE_VERSION}"
        git push -u origin feature/update_${NEW_MASTER_VERSION}_${NEW_NODE_VERSION}

        hub pull-request -m "update_${NEW_MASTER_VERSION}_${NEW_NODE_VERSION}"

    - name: Install terraform
      run: |
        wget https://releases.hashicorp.com/terraform/0.12.9/terraform_0.12.9_linux_amd64.zip
        unzip terraform_0.12.9_linux_amd64.zip
        sudo mv terraform /usr/local/bin


